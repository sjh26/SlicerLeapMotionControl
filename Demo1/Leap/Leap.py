# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _LeapPython
else:
    import _LeapPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LeapPython.delete_SwigPyIterator

    def value(self):
        return _LeapPython.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _LeapPython.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _LeapPython.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _LeapPython.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _LeapPython.SwigPyIterator_equal(self, x)

    def copy(self):
        return _LeapPython.SwigPyIterator_copy(self)

    def next(self):
        return _LeapPython.SwigPyIterator_next(self)

    def __next__(self):
        return _LeapPython.SwigPyIterator___next__(self)

    def previous(self):
        return _LeapPython.SwigPyIterator_previous(self)

    def advance(self, n):
        return _LeapPython.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _LeapPython.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _LeapPython.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _LeapPython.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _LeapPython.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _LeapPython.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _LeapPython.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _LeapPython:
_LeapPython.SwigPyIterator_swigregister(SwigPyIterator)

class byte_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _LeapPython.byte_array_swiginit(self, _LeapPython.new_byte_array(nelements))
    __swig_destroy__ = _LeapPython.delete_byte_array

    def __getitem__(self, index):
        return _LeapPython.byte_array___getitem__(self, index)

    def __setitem__(self, index, value):
        return _LeapPython.byte_array___setitem__(self, index, value)

    def cast(self):
        return _LeapPython.byte_array_cast(self)

    @staticmethod
    def frompointer(t):
        return _LeapPython.byte_array_frompointer(t)

# Register byte_array in _LeapPython:
_LeapPython.byte_array_swigregister(byte_array)

def byte_array_frompointer(t):
    return _LeapPython.byte_array_frompointer(t)

class float_array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _LeapPython.float_array_swiginit(self, _LeapPython.new_float_array(nelements))
    __swig_destroy__ = _LeapPython.delete_float_array

    def __getitem__(self, index):
        return _LeapPython.float_array___getitem__(self, index)

    def __setitem__(self, index, value):
        return _LeapPython.float_array___setitem__(self, index, value)

    def cast(self):
        return _LeapPython.float_array_cast(self)

    @staticmethod
    def frompointer(t):
        return _LeapPython.float_array_frompointer(t)

# Register float_array in _LeapPython:
_LeapPython.float_array_swigregister(float_array)

def float_array_frompointer(t):
    return _LeapPython.float_array_frompointer(t)

class Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LeapPython.Vector_swiginit(self, _LeapPython.new_Vector(*args))

    def distance_to(self, other):
        return _LeapPython.Vector_distance_to(self, other)

    def angle_to(self, other):
        return _LeapPython.Vector_angle_to(self, other)

    def dot(self, other):
        return _LeapPython.Vector_dot(self, other)

    def cross(self, other):
        return _LeapPython.Vector_cross(self, other)

    def __neg__(self):
        return _LeapPython.Vector___neg__(self)

    def __add__(self, other):
        return _LeapPython.Vector___add__(self, other)

    def __sub__(self, other):
        return _LeapPython.Vector___sub__(self, other)

    def __mul__(self, scalar):
        return _LeapPython.Vector___mul__(self, scalar)

    def __truediv__(self, *args):
        return _LeapPython.Vector___truediv__(self, *args)
    __div__ = __truediv__



    def __iadd__(self, other):
        return _LeapPython.Vector___iadd__(self, other)

    def __isub__(self, other):
        return _LeapPython.Vector___isub__(self, other)

    def __imul__(self, scalar):
        return _LeapPython.Vector___imul__(self, scalar)

    def __itruediv__(self, *args):
        return _LeapPython.Vector___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __str__(self):
        return _LeapPython.Vector___str__(self)

    def __eq__(self, other):
        return _LeapPython.Vector___eq__(self, other)

    def __ne__(self, other):
        return _LeapPython.Vector___ne__(self, other)

    def is_valid(self):
        return _LeapPython.Vector_is_valid(self)

    def __getitem__(self, index):
        return _LeapPython.Vector___getitem__(self, index)
    x = property(_LeapPython.Vector_x_get, _LeapPython.Vector_x_set)
    y = property(_LeapPython.Vector_y_get, _LeapPython.Vector_y_set)
    z = property(_LeapPython.Vector_z_get, _LeapPython.Vector_z_set)
    magnitude = property(_LeapPython.Vector_magnitude_get)
    magnitude_squared = property(_LeapPython.Vector_magnitude_squared_get)
    pitch = property(_LeapPython.Vector_pitch_get)
    roll = property(_LeapPython.Vector_roll_get)
    yaw = property(_LeapPython.Vector_yaw_get)
    normalized = property(_LeapPython.Vector_normalized_get)

    def to_float_array(self): return [self.x, self.y, self.z]
    def to_tuple(self): return (self.x, self.y, self.z)

    __swig_destroy__ = _LeapPython.delete_Vector

# Register Vector in _LeapPython:
_LeapPython.Vector_swigregister(Vector)
cvar = _LeapPython.cvar
PI = cvar.PI
DEG_TO_RAD = cvar.DEG_TO_RAD
RAD_TO_DEG = cvar.RAD_TO_DEG
EPSILON = cvar.EPSILON
Vector.zero = _LeapPython.cvar.Vector_zero
Vector.x_axis = _LeapPython.cvar.Vector_x_axis
Vector.y_axis = _LeapPython.cvar.Vector_y_axis
Vector.z_axis = _LeapPython.cvar.Vector_z_axis
Vector.forward = _LeapPython.cvar.Vector_forward
Vector.backward = _LeapPython.cvar.Vector_backward
Vector.left = _LeapPython.cvar.Vector_left
Vector.right = _LeapPython.cvar.Vector_right
Vector.up = _LeapPython.cvar.Vector_up
Vector.down = _LeapPython.cvar.Vector_down

class Quaternion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LeapPython.Quaternion_swiginit(self, _LeapPython.new_Quaternion(*args))

    @staticmethod
    def zero():
        return _LeapPython.Quaternion_zero()
    x = property(_LeapPython.Quaternion_x_get, _LeapPython.Quaternion_x_set)
    y = property(_LeapPython.Quaternion_y_get, _LeapPython.Quaternion_y_set)
    z = property(_LeapPython.Quaternion_z_get, _LeapPython.Quaternion_z_set)
    w = property(_LeapPython.Quaternion_w_get, _LeapPython.Quaternion_w_set)
    __swig_destroy__ = _LeapPython.delete_Quaternion

# Register Quaternion in _LeapPython:
_LeapPython.Quaternion_swigregister(Quaternion)

def Quaternion_zero():
    return _LeapPython.Quaternion_zero()

class Matrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LeapPython.Matrix_swiginit(self, _LeapPython.new_Matrix(*args))

    def set_rotation(self, axis, angle_radians):
        return _LeapPython.Matrix_set_rotation(self, axis, angle_radians)

    def transform_point(self, _in):
        return _LeapPython.Matrix_transform_point(self, _in)

    def transform_direction(self, _in):
        return _LeapPython.Matrix_transform_direction(self, _in)

    def rigid_inverse(self):
        return _LeapPython.Matrix_rigid_inverse(self)

    def __mul__(self, other):
        return _LeapPython.Matrix___mul__(self, other)

    def __imul__(self, other):
        return _LeapPython.Matrix___imul__(self, other)

    def __eq__(self, other):
        return _LeapPython.Matrix___eq__(self, other)

    def __ne__(self, other):
        return _LeapPython.Matrix___ne__(self, other)

    def __str__(self):
        return _LeapPython.Matrix___str__(self)
    x_basis = property(_LeapPython.Matrix_x_basis_get, _LeapPython.Matrix_x_basis_set)
    y_basis = property(_LeapPython.Matrix_y_basis_get, _LeapPython.Matrix_y_basis_set)
    z_basis = property(_LeapPython.Matrix_z_basis_get, _LeapPython.Matrix_z_basis_set)
    origin = property(_LeapPython.Matrix_origin_get, _LeapPython.Matrix_origin_set)

    def to_array_3x3(self, output = None):
        if output is None:
            output = [0]*9
        output[0], output[1], output[2] = self.x_basis.x, self.x_basis.y, self.x_basis.z
        output[3], output[4], output[5] = self.y_basis.x, self.y_basis.y, self.y_basis.z
        output[6], output[7], output[8] = self.z_basis.x, self.z_basis.y, self.z_basis.z
        return output
    def to_array_4x4(self, output = None):
        if output is None:
            output = [0]*16
        output[0],  output[1],  output[2],  output[3]  = self.x_basis.x, self.x_basis.y, self.x_basis.z, 0.0
        output[4],  output[5],  output[6],  output[7]  = self.y_basis.x, self.y_basis.y, self.y_basis.z, 0.0
        output[8],  output[9],  output[10], output[11] = self.z_basis.x, self.z_basis.y, self.z_basis.z, 0.0
        output[12], output[13], output[14], output[15] = self.origin.x,  self.origin.y,  self.origin.z,  1.0
        return output

    __swig_destroy__ = _LeapPython.delete_Matrix

# Register Matrix in _LeapPython:
_LeapPython.Matrix_swigregister(Matrix)
Matrix.identity = _LeapPython.cvar.Matrix_identity

class Interface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

# Register Interface in _LeapPython:
_LeapPython.Interface_swigregister(Interface)

class Arm(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _LeapPython.Arm_swiginit(self, _LeapPython.new_Arm())

    def __eq__(self, arg2):
        return _LeapPython.Arm___eq__(self, arg2)

    def __ne__(self, arg2):
        return _LeapPython.Arm___ne__(self, arg2)

    def __str__(self):
        return _LeapPython.Arm___str__(self)
    width = property(_LeapPython.Arm_width_get)
    center = property(_LeapPython.Arm_center_get)
    direction = property(_LeapPython.Arm_direction_get)
    basis = property(_LeapPython.Arm_basis_get)
    elbow_position = property(_LeapPython.Arm_elbow_position_get)
    wrist_position = property(_LeapPython.Arm_wrist_position_get)
    is_valid = property(_LeapPython.Arm_is_valid_get)
    __swig_destroy__ = _LeapPython.delete_Arm

# Register Arm in _LeapPython:
_LeapPython.Arm_swigregister(Arm)
Arm.invalid = _LeapPython.cvar.Arm_invalid

class Bone(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    TYPE_METACARPAL = _LeapPython.Bone_TYPE_METACARPAL
    TYPE_PROXIMAL = _LeapPython.Bone_TYPE_PROXIMAL
    TYPE_INTERMEDIATE = _LeapPython.Bone_TYPE_INTERMEDIATE
    TYPE_DISTAL = _LeapPython.Bone_TYPE_DISTAL

    def __init__(self):
        _LeapPython.Bone_swiginit(self, _LeapPython.new_Bone())

    def __eq__(self, arg2):
        return _LeapPython.Bone___eq__(self, arg2)

    def __ne__(self, arg2):
        return _LeapPython.Bone___ne__(self, arg2)

    def __str__(self):
        return _LeapPython.Bone___str__(self)
    prev_joint = property(_LeapPython.Bone_prev_joint_get)
    next_joint = property(_LeapPython.Bone_next_joint_get)
    center = property(_LeapPython.Bone_center_get)
    direction = property(_LeapPython.Bone_direction_get)
    length = property(_LeapPython.Bone_length_get)
    width = property(_LeapPython.Bone_width_get)
    type = property(_LeapPython.Bone_type_get)
    basis = property(_LeapPython.Bone_basis_get)
    is_valid = property(_LeapPython.Bone_is_valid_get)
    __swig_destroy__ = _LeapPython.delete_Bone

# Register Bone in _LeapPython:
_LeapPython.Bone_swigregister(Bone)
Bone.invalid = _LeapPython.cvar.Bone_invalid

class Finger(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    TYPE_THUMB = _LeapPython.Finger_TYPE_THUMB
    TYPE_INDEX = _LeapPython.Finger_TYPE_INDEX
    TYPE_MIDDLE = _LeapPython.Finger_TYPE_MIDDLE
    TYPE_RING = _LeapPython.Finger_TYPE_RING
    TYPE_PINKY = _LeapPython.Finger_TYPE_PINKY

    def __init__(self):
        _LeapPython.Finger_swiginit(self, _LeapPython.new_Finger())

    def frame(self):
        return _LeapPython.Finger_frame(self)

    def hand(self):
        return _LeapPython.Finger_hand(self)

    def bone(self, bone_ix):
        return _LeapPython.Finger_bone(self, bone_ix)

    def __eq__(self, arg2):
        return _LeapPython.Finger___eq__(self, arg2)

    def __ne__(self, arg2):
        return _LeapPython.Finger___ne__(self, arg2)

    def __str__(self):
        return _LeapPython.Finger___str__(self)
    id = property(_LeapPython.Finger_id_get)
    tip_position = property(_LeapPython.Finger_tip_position_get)
    direction = property(_LeapPython.Finger_direction_get)
    type = property(_LeapPython.Finger_type_get)
    width = property(_LeapPython.Finger_width_get)
    length = property(_LeapPython.Finger_length_get)
    is_extended = property(_LeapPython.Finger_is_extended_get)
    time_visible = property(_LeapPython.Finger_time_visible_get)
    is_valid = property(_LeapPython.Finger_is_valid_get)
    __swig_destroy__ = _LeapPython.delete_Finger

# Register Finger in _LeapPython:
_LeapPython.Finger_swigregister(Finger)
Finger.invalid = _LeapPython.cvar.Finger_invalid

class Hand(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _LeapPython.Hand_swiginit(self, _LeapPython.new_Hand())

    def finger(self, id):
        return _LeapPython.Hand_finger(self, id)

    def confidence(self):
        return _LeapPython.Hand_confidence(self)

    def __eq__(self, arg2):
        return _LeapPython.Hand___eq__(self, arg2)

    def __ne__(self, arg2):
        return _LeapPython.Hand___ne__(self, arg2)

    def __str__(self):
        return _LeapPython.Hand___str__(self)
    id = property(_LeapPython.Hand_id_get)
    fingers = property(_LeapPython.Hand_fingers_get)
    palm_position = property(_LeapPython.Hand_palm_position_get)
    palm_velocity = property(_LeapPython.Hand_palm_velocity_get)
    palm_normal = property(_LeapPython.Hand_palm_normal_get)
    direction = property(_LeapPython.Hand_direction_get)
    basis = property(_LeapPython.Hand_basis_get)
    is_valid = property(_LeapPython.Hand_is_valid_get)
    grab_angle = property(_LeapPython.Hand_grab_angle_get)
    pinch_distance = property(_LeapPython.Hand_pinch_distance_get)
    grab_strength = property(_LeapPython.Hand_grab_strength_get)
    pinch_strength = property(_LeapPython.Hand_pinch_strength_get)
    palm_width = property(_LeapPython.Hand_palm_width_get)
    stabilized_palm_position = property(_LeapPython.Hand_stabilized_palm_position_get)
    wrist_position = property(_LeapPython.Hand_wrist_position_get)
    time_visible = property(_LeapPython.Hand_time_visible_get)
    is_left = property(_LeapPython.Hand_is_left_get)
    is_right = property(_LeapPython.Hand_is_right_get)
    frame = property(_LeapPython.Hand_frame_get)
    arm = property(_LeapPython.Hand_arm_get)
    __swig_destroy__ = _LeapPython.delete_Hand

# Register Hand in _LeapPython:
_LeapPython.Hand_swigregister(Hand)
Hand.invalid = _LeapPython.cvar.Hand_invalid

class MapPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_LeapPython.MapPoint_id_get, _LeapPython.MapPoint_id_set)
    point = property(_LeapPython.MapPoint_point_get, _LeapPython.MapPoint_point_set)

    @staticmethod
    def invalid():
        return _LeapPython.MapPoint_invalid()

    def __init__(self):
        _LeapPython.MapPoint_swiginit(self, _LeapPython.new_MapPoint())
    __swig_destroy__ = _LeapPython.delete_MapPoint

# Register MapPoint in _LeapPython:
_LeapPython.MapPoint_swigregister(MapPoint)

def MapPoint_invalid():
    return _LeapPython.MapPoint_invalid()

class Device(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _LeapPython.Device_swiginit(self, _LeapPython.new_Device())

    def distance_to_boundary(self, position):
        return _LeapPython.Device_distance_to_boundary(self, position)
    UNKNOWN = _LeapPython.Device_UNKNOWN
    TYPE_PERIPHERAL = _LeapPython.Device_TYPE_PERIPHERAL
    TYPE_NIGHTCRAWLER = _LeapPython.Device_TYPE_NIGHTCRAWLER
    TYPE_RIGEL = _LeapPython.Device_TYPE_RIGEL

    def type_string(self, *args):
        return _LeapPython.Device_type_string(self, *args)

    def type(self):
        return _LeapPython.Device_type(self)

    def __eq__(self, arg2):
        return _LeapPython.Device___eq__(self, arg2)

    def __ne__(self, arg2):
        return _LeapPython.Device___ne__(self, arg2)

    def __str__(self):
        return _LeapPython.Device___str__(self)
    horizontal_view_angle = property(_LeapPython.Device_horizontal_view_angle_get)
    vertical_view_angle = property(_LeapPython.Device_vertical_view_angle_get)
    range = property(_LeapPython.Device_range_get)
    baseline = property(_LeapPython.Device_baseline_get)
    is_valid = property(_LeapPython.Device_is_valid_get)
    is_streaming = property(_LeapPython.Device_is_streaming_get)
    is_smudged = property(_LeapPython.Device_is_smudged_get)
    is_lighting_bad = property(_LeapPython.Device_is_lighting_bad_get)
    serial_number = property(_LeapPython.Device_serial_number_get)
    __swig_destroy__ = _LeapPython.delete_Device

# Register Device in _LeapPython:
_LeapPython.Device_swigregister(Device)
Device.invalid = _LeapPython.cvar.Device_invalid

class FailedDevice(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FAIL_UNKNOWN = _LeapPython.FailedDevice_FAIL_UNKNOWN
    FAIL_CALIBRATION = _LeapPython.FailedDevice_FAIL_CALIBRATION
    FAIL_FIRMWARE = _LeapPython.FailedDevice_FAIL_FIRMWARE
    FAIL_TRANSPORT = _LeapPython.FailedDevice_FAIL_TRANSPORT
    FAIL_CONTROL = _LeapPython.FailedDevice_FAIL_CONTROL
    FAIL_COUNT = _LeapPython.FailedDevice_FAIL_COUNT

    def __init__(self):
        _LeapPython.FailedDevice_swiginit(self, _LeapPython.new_FailedDevice())

    def is_valid(self):
        return _LeapPython.FailedDevice_is_valid(self)

    @staticmethod
    def invalid():
        return _LeapPython.FailedDevice_invalid()

    def __eq__(self, arg2):
        return _LeapPython.FailedDevice___eq__(self, arg2)

    def __ne__(self, arg2):
        return _LeapPython.FailedDevice___ne__(self, arg2)
    pnp_id = property(_LeapPython.FailedDevice_pnp_id_get)
    failure = property(_LeapPython.FailedDevice_failure_get)
    __swig_destroy__ = _LeapPython.delete_FailedDevice

# Register FailedDevice in _LeapPython:
_LeapPython.FailedDevice_swigregister(FailedDevice)

def FailedDevice_invalid():
    return _LeapPython.FailedDevice_invalid()

class Image(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _LeapPython.Image_swiginit(self, _LeapPython.new_Image())

    def data(self, dst):
        return _LeapPython.Image_data(self, dst)

    def distortion(self, dst):
        return _LeapPython.Image_distortion(self, dst)
    INFRARED = _LeapPython.Image_INFRARED
    IBRG = _LeapPython.Image_IBRG

    def rectify(self, uv):
        return _LeapPython.Image_rectify(self, uv)

    def warp(self, xy):
        return _LeapPython.Image_warp(self, xy)

    def __eq__(self, arg2):
        return _LeapPython.Image___eq__(self, arg2)

    def __ne__(self, arg2):
        return _LeapPython.Image___ne__(self, arg2)

    def __str__(self):
        return _LeapPython.Image___str__(self)
    sequence_id = property(_LeapPython.Image_sequence_id_get)
    id = property(_LeapPython.Image_id_get)
    width = property(_LeapPython.Image_width_get)
    height = property(_LeapPython.Image_height_get)
    bytes_per_pixel = property(_LeapPython.Image_bytes_per_pixel_get)
    format = property(_LeapPython.Image_format_get)
    distortion_width = property(_LeapPython.Image_distortion_width_get)
    distortion_height = property(_LeapPython.Image_distortion_height_get)
    ray_offset_x = property(_LeapPython.Image_ray_offset_x_get)
    ray_offset_y = property(_LeapPython.Image_ray_offset_y_get)
    ray_scale_x = property(_LeapPython.Image_ray_scale_x_get)
    ray_scale_y = property(_LeapPython.Image_ray_scale_y_get)
    timestamp = property(_LeapPython.Image_timestamp_get)
    is_valid = property(_LeapPython.Image_is_valid_get)

    def get_data(self):
        ptr = byte_array(self.width * self.height * self.bytes_per_pixel)
        LeapPython.Image_data(self, ptr)
        return ptr
    def get_distortion(self):
        ptr = float_array(self.distortion_width * self.distortion_height)
        LeapPython.Image_distortion(self, ptr)
        return ptr

    data = property(get_data)
    distortion = property(get_distortion)

    __swig_destroy__ = _LeapPython.delete_Image

# Register Image in _LeapPython:
_LeapPython.Image_swigregister(Image)
Image.invalid = _LeapPython.cvar.Image_invalid

class FingerList(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _LeapPython.FingerList_swiginit(self, _LeapPython.new_FingerList())

    def __len__(self):
        return _LeapPython.FingerList___len__(self)

    def __getitem__(self, index):
        return _LeapPython.FingerList___getitem__(self, index)

    def append(self, other):
        return _LeapPython.FingerList_append(self, other)

    def extended(self):
        return _LeapPython.FingerList_extended(self)

    def finger_type(self, type):
        return _LeapPython.FingerList_finger_type(self, type)
    is_empty = property(_LeapPython.FingerList_is_empty_get)
    leftmost = property(_LeapPython.FingerList_leftmost_get)
    rightmost = property(_LeapPython.FingerList_rightmost_get)
    frontmost = property(_LeapPython.FingerList_frontmost_get)

    def __iter__(self):
      _pos = 0
      while _pos < len(self):
        yield self[_pos]
        _pos += 1

    __swig_destroy__ = _LeapPython.delete_FingerList

# Register FingerList in _LeapPython:
_LeapPython.FingerList_swigregister(FingerList)

class HandList(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _LeapPython.HandList_swiginit(self, _LeapPython.new_HandList())

    def __len__(self):
        return _LeapPython.HandList___len__(self)

    def __getitem__(self, index):
        return _LeapPython.HandList___getitem__(self, index)

    def append(self, other):
        return _LeapPython.HandList_append(self, other)
    is_empty = property(_LeapPython.HandList_is_empty_get)
    leftmost = property(_LeapPython.HandList_leftmost_get)
    rightmost = property(_LeapPython.HandList_rightmost_get)
    frontmost = property(_LeapPython.HandList_frontmost_get)

    def __iter__(self):
      _pos = 0
      while _pos < len(self):
        yield self[_pos]
        _pos += 1

    __swig_destroy__ = _LeapPython.delete_HandList

# Register HandList in _LeapPython:
_LeapPython.HandList_swigregister(HandList)

class DeviceList(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _LeapPython.DeviceList_swiginit(self, _LeapPython.new_DeviceList())

    def __len__(self):
        return _LeapPython.DeviceList___len__(self)

    def __getitem__(self, index):
        return _LeapPython.DeviceList___getitem__(self, index)

    def append(self, other):
        return _LeapPython.DeviceList_append(self, other)
    is_empty = property(_LeapPython.DeviceList_is_empty_get)

    def __iter__(self):
      _pos = 0
      while _pos < len(self):
        yield self[_pos]
        _pos += 1

    __swig_destroy__ = _LeapPython.delete_DeviceList

# Register DeviceList in _LeapPython:
_LeapPython.DeviceList_swigregister(DeviceList)

class FailedDeviceList(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _LeapPython.FailedDeviceList_swiginit(self, _LeapPython.new_FailedDeviceList())

    def __len__(self):
        return _LeapPython.FailedDeviceList___len__(self)

    def __getitem__(self, index):
        return _LeapPython.FailedDeviceList___getitem__(self, index)

    def append(self, other):
        return _LeapPython.FailedDeviceList_append(self, other)
    is_empty = property(_LeapPython.FailedDeviceList_is_empty_get)

    def __iter__(self):
      _pos = 0
      while _pos < len(self):
        yield self[_pos]
        _pos += 1

    __swig_destroy__ = _LeapPython.delete_FailedDeviceList

# Register FailedDeviceList in _LeapPython:
_LeapPython.FailedDeviceList_swigregister(FailedDeviceList)

class ImageList(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _LeapPython.ImageList_swiginit(self, _LeapPython.new_ImageList())

    def __len__(self):
        return _LeapPython.ImageList___len__(self)

    def __getitem__(self, index):
        return _LeapPython.ImageList___getitem__(self, index)

    def append(self, other):
        return _LeapPython.ImageList_append(self, other)
    is_empty = property(_LeapPython.ImageList_is_empty_get)

    def __iter__(self):
      _pos = 0
      while _pos < len(self):
        yield self[_pos]
        _pos += 1

    __swig_destroy__ = _LeapPython.delete_ImageList

# Register ImageList in _LeapPython:
_LeapPython.ImageList_swigregister(ImageList)

class MapPointList(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _LeapPython.MapPointList_swiginit(self, _LeapPython.new_MapPointList())

    def __len__(self):
        return _LeapPython.MapPointList___len__(self)

    def is_empty(self):
        return _LeapPython.MapPointList_is_empty(self)

    def __getitem__(self, index):
        return _LeapPython.MapPointList___getitem__(self, index)

    def append(self, other):
        return _LeapPython.MapPointList_append(self, other)

    def __iter__(self):
      _pos = 0
      while _pos < len(self):
        yield self[_pos]
        _pos += 1

    __swig_destroy__ = _LeapPython.delete_MapPointList

# Register MapPointList in _LeapPython:
_LeapPython.MapPointList_swigregister(MapPointList)

class HeadPose(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _LeapPython.HeadPose_swiginit(self, _LeapPython.new_HeadPose())
    timestamp = property(_LeapPython.HeadPose_timestamp_get)
    position = property(_LeapPython.HeadPose_position_get)
    orientation = property(_LeapPython.HeadPose_orientation_get)
    __swig_destroy__ = _LeapPython.delete_HeadPose

# Register HeadPose in _LeapPython:
_LeapPython.HeadPose_swigregister(HeadPose)

class Frame(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _LeapPython.Frame_swiginit(self, _LeapPython.new_Frame())

    def hand(self, id):
        return _LeapPython.Frame_hand(self, id)

    def finger(self, id):
        return _LeapPython.Frame_finger(self, id)

    def map_points(self):
        return _LeapPython.Frame_map_points(self)

    def __eq__(self, arg2):
        return _LeapPython.Frame___eq__(self, arg2)

    def __ne__(self, arg2):
        return _LeapPython.Frame___ne__(self, arg2)

    def __str__(self):
        return _LeapPython.Frame___str__(self)
    id = property(_LeapPython.Frame_id_get)
    timestamp = property(_LeapPython.Frame_timestamp_get)
    current_frames_per_second = property(_LeapPython.Frame_current_frames_per_second_get)
    fingers = property(_LeapPython.Frame_fingers_get)
    hands = property(_LeapPython.Frame_hands_get)
    images = property(_LeapPython.Frame_images_get)
    raw_images = property(_LeapPython.Frame_raw_images_get)
    is_valid = property(_LeapPython.Frame_is_valid_get)
    __swig_destroy__ = _LeapPython.delete_Frame

# Register Frame in _LeapPython:
_LeapPython.Frame_swigregister(Frame)
Frame.invalid = _LeapPython.cvar.Frame_invalid

class Config(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    TYPE_UNKNOWN = _LeapPython.Config_TYPE_UNKNOWN
    TYPE_BOOLEAN = _LeapPython.Config_TYPE_BOOLEAN
    TYPE_INT32 = _LeapPython.Config_TYPE_INT32
    TYPE_FLOAT = _LeapPython.Config_TYPE_FLOAT
    TYPE_STRING = _LeapPython.Config_TYPE_STRING

    def value(self, key, timeout_milliseconds=20):
        return _LeapPython.Config_value(self, key, timeout_milliseconds)

    def set_value(self, *args):
        return _LeapPython.Config_set_value(self, *args)
    __swig_destroy__ = _LeapPython.delete_Config

# Register Config in _LeapPython:
_LeapPython.Config_swigregister(Config)

class Controller(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _LeapPython.delete_Controller

    def __init__(self, *args):
        _LeapPython.Controller_swiginit(self, _LeapPython.new_Controller(*args))

    def is_service_connected(self):
        return _LeapPython.Controller_is_service_connected(self)
    POLICY_DEFAULT = _LeapPython.Controller_POLICY_DEFAULT
    POLICY_IMAGES = _LeapPython.Controller_POLICY_IMAGES
    POLICY_OPTIMIZE_HMD = _LeapPython.Controller_POLICY_OPTIMIZE_HMD
    POLICY_ALLOW_PAUSE_RESUME = _LeapPython.Controller_POLICY_ALLOW_PAUSE_RESUME
    POLICY_RAW_IMAGES = _LeapPython.Controller_POLICY_RAW_IMAGES
    POLICY_MAP_POINTS = _LeapPython.Controller_POLICY_MAP_POINTS

    def set_policy_flags(self, flags):
        return _LeapPython.Controller_set_policy_flags(self, flags)

    def set_policy(self, policy):
        return _LeapPython.Controller_set_policy(self, policy)

    def clear_policy(self, policy):
        return _LeapPython.Controller_clear_policy(self, policy)

    def is_policy_set(self, policy):
        return _LeapPython.Controller_is_policy_set(self, policy)

    def add_listener(self, listener):
        return _LeapPython.Controller_add_listener(self, listener)

    def remove_listener(self, listener):
        return _LeapPython.Controller_remove_listener(self, listener)

    def frame(self, history=0):
        return _LeapPython.Controller_frame(self, history)

    def head_pose(self, timestamp):
        return _LeapPython.Controller_head_pose(self, timestamp)

    def config(self):
        return _LeapPython.Controller_config(self)

    def failed_devices(self):
        return _LeapPython.Controller_failed_devices(self)

    def set_paused(self, pause):
        return _LeapPython.Controller_set_paused(self, pause)

    def is_paused(self):
        return _LeapPython.Controller_is_paused(self)

    def now(self):
        return _LeapPython.Controller_now(self)
    is_connected = property(_LeapPython.Controller_is_connected_get)
    policy_flags = property(_LeapPython.Controller_policy_flags_get)
    images = property(_LeapPython.Controller_images_get)
    raw_images = property(_LeapPython.Controller_raw_images_get)
    devices = property(_LeapPython.Controller_devices_get)

# Register Controller in _LeapPython:
_LeapPython.Controller_swigregister(Controller)

MESSAGE_UNKNOWN = _LeapPython.MESSAGE_UNKNOWN
MESSAGE_CRITICAL = _LeapPython.MESSAGE_CRITICAL
MESSAGE_WARNING = _LeapPython.MESSAGE_WARNING
MESSAGE_INFORMATION = _LeapPython.MESSAGE_INFORMATION
class Listener(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == Listener:
            _self = None
        else:
            _self = self
        _LeapPython.Listener_swiginit(self, _LeapPython.new_Listener(_self, ))
    __swig_destroy__ = _LeapPython.delete_Listener

    def on_init(self, arg0):
        return _LeapPython.Listener_on_init(self, arg0)

    def on_connect(self, arg0):
        return _LeapPython.Listener_on_connect(self, arg0)

    def on_disconnect(self, arg0):
        return _LeapPython.Listener_on_disconnect(self, arg0)

    def on_exit(self, arg0):
        return _LeapPython.Listener_on_exit(self, arg0)

    def on_frame(self, arg0):
        return _LeapPython.Listener_on_frame(self, arg0)

    def on_service_connect(self, arg0):
        return _LeapPython.Listener_on_service_connect(self, arg0)

    def on_service_disconnect(self, arg0):
        return _LeapPython.Listener_on_service_disconnect(self, arg0)

    def on_device_change(self, arg0):
        return _LeapPython.Listener_on_device_change(self, arg0)

    def on_images(self, arg0):
        return _LeapPython.Listener_on_images(self, arg0)

    def on_service_change(self, arg0):
        return _LeapPython.Listener_on_service_change(self, arg0)

    def on_device_failure(self, arg0):
        return _LeapPython.Listener_on_device_failure(self, arg0)

    def on_log_message(self, arg0, severity, timestamp, msg):
        return _LeapPython.Listener_on_log_message(self, arg0, severity, timestamp, msg)

    def on_head_pose(self, arg0, timestamp):
        return _LeapPython.Listener_on_head_pose(self, arg0, timestamp)
    def __disown__(self):
        self.this.disown()
        _LeapPython.disown_Listener(self)
        return weakref.proxy(self)

# Register Listener in _LeapPython:
_LeapPython.Listener_swigregister(Listener)



